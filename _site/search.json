[
  {
    "objectID": "Projects.html",
    "href": "Projects.html",
    "title": "Projects",
    "section": "",
    "text": "This is the “Projects” section. Showcase your work or portfolio items here."
  },
  {
    "objectID": "Practice3-4.html",
    "href": "Practice3-4.html",
    "title": "Practice3-4",
    "section": "",
    "text": "The following Python code demonstrates how to scrape IMDb’s Top 250 movie data using requests, BeautifulSoup, and save the results to a CSV file.\n\nimport json\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# 获取IMDb Top 250数据\nurl_imdb = \"https://www.imdb.com/chart/top/?ref_=nv_mv_250\"\nheaders_imdb = {\n    \"User-Agent\": (\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \"\n                   \"AppleWebKit/537.36 (KHTML, like Gecko) \"\n                   \"Chrome/91.0.4472.124 Safari/537.36\")\n}\nresponse_imdb = requests.get(url_imdb, headers=headers_imdb)\nsoup_imdb = BeautifulSoup(response_imdb.text, \"html.parser\")\nscript_imdb = soup_imdb.select_one(\"script[type='application/ld+json']\")\ndata_imdb = json.loads(script_imdb.text)\n\nimdb_movies = []\nfor movie in data_imdb[\"itemListElement\"]:\n    item = movie[\"item\"]\n    rating = None\n    if \"aggregateRating\" in item and \"ratingValue\" in item[\"aggregateRating\"]:\n        rating = item[\"aggregateRating\"][\"ratingValue\"]\n    # IMDb的结构化数据中也可以获取到上映年份、导演和类型\n    # 这里简单示范，只获取必须数据，后续需要可拓展。\n    # item中包含datePublished、genre、director等字段\n    imdb_movies.append({\n        \"title\": item.get(\"name\"),    # 英文片名\n        \"rating\": rating,\n        \"year\": item.get(\"datePublished\", \"\"),\n        \"genre\": \"|\".join(item.get(\"genre\", [])) if \"genre\" in item else \"\",\n        \"director\": \"|\".join([d[\"name\"] for d in item.get(\"director\", [])]) if \"director\" in item else \"\"\n    })\ndf_imdb = pd.DataFrame(imdb_movies)\n\ndf_imdb.to_csv('imdb_top250.csv', index=False)"
  },
  {
    "objectID": "Practice3-4.html#practice-3.1",
    "href": "Practice3-4.html#practice-3.1",
    "title": "Practice3-4",
    "section": "",
    "text": "The following Python code demonstrates how to scrape IMDb’s Top 250 movie data using requests, BeautifulSoup, and save the results to a CSV file.\n\nimport json\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n# 获取IMDb Top 250数据\nurl_imdb = \"https://www.imdb.com/chart/top/?ref_=nv_mv_250\"\nheaders_imdb = {\n    \"User-Agent\": (\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) \"\n                   \"AppleWebKit/537.36 (KHTML, like Gecko) \"\n                   \"Chrome/91.0.4472.124 Safari/537.36\")\n}\nresponse_imdb = requests.get(url_imdb, headers=headers_imdb)\nsoup_imdb = BeautifulSoup(response_imdb.text, \"html.parser\")\nscript_imdb = soup_imdb.select_one(\"script[type='application/ld+json']\")\ndata_imdb = json.loads(script_imdb.text)\n\nimdb_movies = []\nfor movie in data_imdb[\"itemListElement\"]:\n    item = movie[\"item\"]\n    rating = None\n    if \"aggregateRating\" in item and \"ratingValue\" in item[\"aggregateRating\"]:\n        rating = item[\"aggregateRating\"][\"ratingValue\"]\n    # IMDb的结构化数据中也可以获取到上映年份、导演和类型\n    # 这里简单示范，只获取必须数据，后续需要可拓展。\n    # item中包含datePublished、genre、director等字段\n    imdb_movies.append({\n        \"title\": item.get(\"name\"),    # 英文片名\n        \"rating\": rating,\n        \"year\": item.get(\"datePublished\", \"\"),\n        \"genre\": \"|\".join(item.get(\"genre\", [])) if \"genre\" in item else \"\",\n        \"director\": \"|\".join([d[\"name\"] for d in item.get(\"director\", [])]) if \"director\" in item else \"\"\n    })\ndf_imdb = pd.DataFrame(imdb_movies)\n\ndf_imdb.to_csv('imdb_top250.csv', index=False)"
  },
  {
    "objectID": "Practice3-4.html#q1_compare-average-ratings",
    "href": "Practice3-4.html#q1_compare-average-ratings",
    "title": "Practice3-4",
    "section": "4.1 - q1_Compare Average Ratings",
    "text": "4.1 - q1_Compare Average Ratings\nThe following Python code compares the average ratings of IMDb and Douban’s Top 250 movies and visualizes the comparison using a bar chart.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load data\ndf_imdb = pd.read_csv('imdb_top250.csv')\ndf_douban = pd.read_csv('douban_top250.csv')\n\n# Convert ratings to numeric\ndf_imdb['rating'] = pd.to_numeric(df_imdb['rating'], errors='coerce')\ndf_douban['rating'] = pd.to_numeric(df_douban['rating'], errors='coerce')\n\n# Calculate average ratings\navg_imdb = df_imdb['rating'].mean()\navg_douban = df_douban['rating'].mean()\n\n# Print average ratings\nprint(\"IMDb Average Rating:\", avg_imdb)\nprint(\"Douban Average Rating:\", avg_douban)\n\n# Prepare data for visualization\nplatforms = ['IMDb', 'Douban']\navg_ratings = [avg_imdb, avg_douban]\n\n# Create bar chart\nplt.figure(figsize=(6, 4))\nplt.bar(platforms, avg_ratings, color=['skyblue', 'salmon'])\nplt.title('Average Ratings Comparison')\nplt.ylabel('Average Rating')\nplt.ylim(0, 10)\nfor i, v in enumerate(avg_ratings):\n    plt.text(i, v + 0.1, f'{v:.2f}', ha='center', fontsize=12)\nplt.show()\n\nIMDb Average Rating: 8.31\nDouban Average Rating: 8.9388"
  },
  {
    "objectID": "Practice3-4.html#q2-find-overlapping-movies",
    "href": "Practice3-4.html#q2-find-overlapping-movies",
    "title": "Practice3-4",
    "section": "4.2 - q2-Find Overlapping Movies",
    "text": "4.2 - q2-Find Overlapping Movies\nThe following Python code identifies movies that appear in both IMDb’s and Douban’s Top 250 lists based on their English titles.\n\nimport pandas as pd\n\n# Load data\ndf_imdb = pd.read_csv('imdb_top250.csv')\ndf_douban = pd.read_csv('douban_top250.csv')\n\n# Extract and clean movie titles\ndf_imdb_titles = set(df_imdb['title'].dropna().str.strip())\ndf_douban_titles = set(df_douban['en_title'].dropna().str.strip())\n\n# Find common titles\ncommon_titles = df_imdb_titles.intersection(df_douban_titles)\n\n# Output results\nprint(\"Movies that appear in both IMDb and Douban Top 250 lists (matched by English titles):\")\nif common_titles:\n    for title in sorted(common_titles):\n        print(title)\nelse:\n    print(\"No overlapping movies found.\")\n\nMovies that appear in both IMDb and Douban Top 250 lists (matched by English titles):\nNo overlapping movies found."
  },
  {
    "objectID": "Practice3-4.html#q3-release-year-distribution",
    "href": "Practice3-4.html#q3-release-year-distribution",
    "title": "Practice3-4",
    "section": "4.3 - q3-Release Year Distribution",
    "text": "4.3 - q3-Release Year Distribution\nThe following Python code visualizes the release year distribution of movies in IMDb’s and Douban’s Top 250 lists using histograms.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load data\ndf_imdb = pd.read_csv('imdb_top250.csv')\ndf_douban = pd.read_csv('douban_top250.csv')\n\n# Convert year column to numeric, cleaning any non-numeric values\ndf_imdb['year'] = pd.to_numeric(df_imdb['year'], errors='coerce')\ndf_douban['year'] = pd.to_numeric(df_douban['year'], errors='coerce')\n\n# Plot release year distributions\nplt.figure(figsize=(12, 5))\n\nplt.subplot(1, 2, 1)\ndf_imdb['year'].dropna().hist(bins=20, color='skyblue')\nplt.title('IMDb Year Distribution')\nplt.xlabel('Year')\nplt.ylabel('Count')\n\nplt.subplot(1, 2, 2)\ndf_douban['year'].dropna().hist(bins=20, color='salmon')\nplt.title('Douban Year Distribution')\nplt.xlabel('Year')\nplt.ylabel('Count')\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "Practice3-4.html#q4-genre-distribution",
    "href": "Practice3-4.html#q4-genre-distribution",
    "title": "Practice3-4",
    "section": "4.4 - q4-Genre Distribution",
    "text": "4.4 - q4-Genre Distribution\nThe following Python code visualizes the top 10 genres for movies in IMDb’s and Douban’s Top 250 lists using bar charts.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf_imdb = pd.read_csv('imdb_top250.csv')\ndf_douban = pd.read_csv('douban_top250.csv')\n\n# 假设两个DataFrame的director字段类似IMDb，使用\"|\"分隔多个导演\ndf_imdb['director'] = df_imdb['director'].fillna('')\nimdb_directors = df_imdb['director'].str.split('|').explode().str.strip()\nimdb_director_counts = imdb_directors.value_counts()\n\n# 绘制各平台导演出现次数Top10\ntop_imdb_directors = imdb_director_counts.head(10)\n\nplt.figure(figsize=(12,5))\nplt.subplot(1,2,1)\ntop_imdb_directors.plot(kind='bar', color='skyblue')\nplt.title('Top 10 Directors in IMDb Top 250')\nplt.ylabel('Count')\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Dongxia Cheng’s website and data analysis portfolio\nHello, and thanks for visiting!\nWelcome to my website and data analysis portfolio.\n\nHere, I’ll feature my projects for the Fall 2024 Modern Applied Data Analysis class.\nPlease use the Menu Bar to visit."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About Me\n\n\n\nCheng Dongxia\n\n\n我是程东霞，是一名充满热情与活力的年轻人，目前就读于白俄罗斯国立大学商学院，专业为教育管理。自幼对教育领域怀有浓厚的兴趣，我渴望通过系统的学习和实践，为教育事业贡献自己的一份力量。 在商学院的学习过程中，我积极汲取教育管理的前沿知识和理念，努力提升自己的专业素养和实践能力。我热爱思考，善于分析，总能够迅速抓住问题的关键，并提出切实可行的解决方案。 除了学习，我还热衷于参加各种社团活动和实践项目，锻炼自己的组织协调能力和团队合作精神。我相信，这些经历将为我未来的职业生涯奠定坚实的基础。期待在未来的日子里，我能够在教育管理的道路上不断前行，实现自己的梦想和价值。\nI am Cheng Dongxia, a passionate and energetic young individual currently studying at the Belarusian State University Business School, majorizing in Educational Management. From a young age, I have held a strong interest in the field of education and aspire to contribute to the educational sector through systematic learning and practice.\nDuring my studies at the Business School, I actively absorb cutting-edge knowledge and concepts in educational management, striving to enhance my professional competence and practical skills. I love thinking, am adept at analysis, and can quickly grasp the core of problems, proposing practical and feasible solutions.\nIn addition to my studies, I am also enthusiastic about participating in various club activities and practical projects, honing my organizational and coordination abilities as well as my team spirit. I believe that these experiences will lay a solid foundation for my future career. I look forward to continuously advancing on the path of educational management in the days to come, realizing my dreams and values."
  },
  {
    "objectID": "Practice1-2.html",
    "href": "Practice1-2.html",
    "title": "Practice1-2",
    "section": "",
    "text": "The following Python code downloads temperature anomaly data from NASA, processes it, and visualizes temperature anomalies.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Download NASA's northern hemisphere temperature data\nurl = \"https://data.giss.nasa.gov/gistemp/tabledata_v4/NH.Ts+dSST.csv\"\n\n# Attempt to download the data and handle potential errors\ntry:\n    df = pd.read_csv(url, skiprows=1, na_values=\"***\")\nexcept Exception as e:\n    print(f\"Error downloading or reading the data: {e}\")\n    df = None\n\n# Check if the data was successfully loaded\nif df is not None:\n    # Set year as the index\n    df = df.set_index(\"Year\")\n\n    # Plot temperature anomaly for a specific month\n    def plot_monthly_temperature(month):\n        try:\n            fig, ax = plt.subplots()\n            ax.axhline(0, color=\"orange\")\n            ax.annotate(\"1951—1980 average\", xy=(0.66, -0.2), xycoords=(\"figure fraction\", \"data\"))\n            df[month].plot(ax=ax)\n            ax.set_title(f\"Average temperature anomaly in {month} \\n in the northern hemisphere (1880—{df.index.max()})\")\n            ax.set_ylabel(\"Annual temperature anomalies\")\n            plt.show()\n        except KeyError:\n            print(f\"No data for month {month}\")\n\n    # Plot seasonal average temperature anomaly\n    def plot_seasonal_temperature(season):\n        try:\n            fig, ax = plt.subplots()\n            ax.axhline(0, color=\"orange\")\n            ax.annotate(\"1951—1980 average\", xy=(0.66, -0.2), xycoords=(\"figure fraction\", \"data\"))\n            df[season].plot(ax=ax)\n            ax.set_title(f\"Average temperature anomaly in {season} \\n in the northern hemisphere (1880—{df.index.max()})\")\n            ax.set_ylabel(\"Annual temperature anomalies\")\n            plt.show()\n        except KeyError:\n            print(f\"No data for season {season}\")\n\n    # Plot annual average temperature anomaly\n    def plot_annual_temperature():\n        try:\n            fig, ax = plt.subplots()\n            ax.axhline(0, color=\"orange\")\n            ax.annotate(\"1951—1980 average\", xy=(0.66, -0.2), xycoords=(\"figure fraction\", \"data\"))\n            df[\"J-D\"].plot(ax=ax)\n            ax.set_title(f\"Average annual temperature anomaly \\n in the northern hemisphere (1880—{df.index.max()})\")\n            ax.set_ylabel(\"Annual temperature anomalies\")\n            plt.show()\n        except KeyError:\n            print(\"No annual data available\")\n\n    # Generate plots\n    plot_monthly_temperature(\"Jan\")\n    plot_seasonal_temperature(\"DJF\")  # Winter\n    plot_seasonal_temperature(\"MAM\")  # Spring\n    plot_seasonal_temperature(\"JJA\")  # Summer\n    plot_seasonal_temperature(\"SON\")  # Fall\n    plot_annual_temperature()\nelse:\n    print(\"Failed to load data. Please check your internet connection and try again.\")"
  },
  {
    "objectID": "Practice1-2.html#practice-1",
    "href": "Practice1-2.html#practice-1",
    "title": "Practice1-2",
    "section": "",
    "text": "The following Python code downloads temperature anomaly data from NASA, processes it, and visualizes temperature anomalies.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Download NASA's northern hemisphere temperature data\nurl = \"https://data.giss.nasa.gov/gistemp/tabledata_v4/NH.Ts+dSST.csv\"\n\n# Attempt to download the data and handle potential errors\ntry:\n    df = pd.read_csv(url, skiprows=1, na_values=\"***\")\nexcept Exception as e:\n    print(f\"Error downloading or reading the data: {e}\")\n    df = None\n\n# Check if the data was successfully loaded\nif df is not None:\n    # Set year as the index\n    df = df.set_index(\"Year\")\n\n    # Plot temperature anomaly for a specific month\n    def plot_monthly_temperature(month):\n        try:\n            fig, ax = plt.subplots()\n            ax.axhline(0, color=\"orange\")\n            ax.annotate(\"1951—1980 average\", xy=(0.66, -0.2), xycoords=(\"figure fraction\", \"data\"))\n            df[month].plot(ax=ax)\n            ax.set_title(f\"Average temperature anomaly in {month} \\n in the northern hemisphere (1880—{df.index.max()})\")\n            ax.set_ylabel(\"Annual temperature anomalies\")\n            plt.show()\n        except KeyError:\n            print(f\"No data for month {month}\")\n\n    # Plot seasonal average temperature anomaly\n    def plot_seasonal_temperature(season):\n        try:\n            fig, ax = plt.subplots()\n            ax.axhline(0, color=\"orange\")\n            ax.annotate(\"1951—1980 average\", xy=(0.66, -0.2), xycoords=(\"figure fraction\", \"data\"))\n            df[season].plot(ax=ax)\n            ax.set_title(f\"Average temperature anomaly in {season} \\n in the northern hemisphere (1880—{df.index.max()})\")\n            ax.set_ylabel(\"Annual temperature anomalies\")\n            plt.show()\n        except KeyError:\n            print(f\"No data for season {season}\")\n\n    # Plot annual average temperature anomaly\n    def plot_annual_temperature():\n        try:\n            fig, ax = plt.subplots()\n            ax.axhline(0, color=\"orange\")\n            ax.annotate(\"1951—1980 average\", xy=(0.66, -0.2), xycoords=(\"figure fraction\", \"data\"))\n            df[\"J-D\"].plot(ax=ax)\n            ax.set_title(f\"Average annual temperature anomaly \\n in the northern hemisphere (1880—{df.index.max()})\")\n            ax.set_ylabel(\"Annual temperature anomalies\")\n            plt.show()\n        except KeyError:\n            print(\"No annual data available\")\n\n    # Generate plots\n    plot_monthly_temperature(\"Jan\")\n    plot_seasonal_temperature(\"DJF\")  # Winter\n    plot_seasonal_temperature(\"MAM\")  # Spring\n    plot_seasonal_temperature(\"JJA\")  # Summer\n    plot_seasonal_temperature(\"SON\")  # Fall\n    plot_annual_temperature()\nelse:\n    print(\"Failed to load data. Please check your internet connection and try again.\")"
  },
  {
    "objectID": "Practice1-2.html#practice-2.0",
    "href": "Practice1-2.html#practice-2.0",
    "title": "Practice1-2",
    "section": "Practice 2.0",
    "text": "Practice 2.0\nThe following Python code demonstrates how to create a line chart showing the average contributions during a game.\n\nimport matplotlib.pyplot as plt\n\n# Data preparation\nperiods = list(range(1, 11))  # Periods from 1 to 10\naverage_contributions = [50.0, 14.7, 28.8, 27.2, 35.2, 40.2, 46.2, 42.3, 35.9, 42.7]  # Average contribution values\n\n# Create a figure\nplt.figure(figsize=(10, 6))\n\n# Plot a line chart\nplt.plot(periods, average_contributions, marker='o', linestyle='-', color='b')\n\n# Add title and axis labels\nplt.title('Change in Average Contributions During the Game')\nplt.xlabel('Period (1-10)')  # X-axis label\nplt.ylabel('Average Contribution (€)')  # Y-axis label\n\n# Enable grid\nplt.grid(True)\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "Practice1-2.html#practice-2.1",
    "href": "Practice1-2.html#practice-2.1",
    "title": "Practice1-2",
    "section": "Practice 2.1",
    "text": "Practice 2.1\nThe following Python code demonstrates average contributions across multiple cities, visualized using a line chart.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Data dictionary\ndata = {\n    \"Copenhagen\": [14.1, 14.1, 13.7, 12.9, 12.3, 11.7, 10.8, 10.6, 9.8, 5.3],\n    \"Dniprop\": [11.0, 12.6, 12.1, 11.2, 11.3, 10.5, 9.5, 10.3, 9.0, 8.7],\n    \"Minsk\": [12.8, 12.3, 12.6, 12.3, 11.8, 9.9, 9.9, 8.4, 8.3, 6.9],\n}\n\n# Create DataFrame\ndf = pd.DataFrame.from_dict(data)\n\n# Plot data\nfig, ax = plt.subplots()\ndf.plot(ax=ax, legend=True)  # Add legend=True to show legends\n\n# Set chart title and axis labels\nax.set_title(\"Average contributions to the public goods game: Without punishment\")\nax.set_ylabel(\"Average contribution\")\nax.set_xlabel(\"Round\")\n\n# Show plot\nplt.show()"
  },
  {
    "objectID": "Practice1-2.html#practice-2.2",
    "href": "Practice1-2.html#practice-2.2",
    "title": "Practice1-2",
    "section": "Practice 2.2",
    "text": "Practice 2.2\nThe following Python code demonstrates two methods to calculate and visualize average contributions in a public goods game, with and without punishment.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 数据创建\nnp.random.seed(0)  # 设置随机种子以确保结果可重复\ndata_n = pd.DataFrame(np.random.randint(1, 15, size=(10, 5)), columns=['Period1', 'Period2', 'Period3', 'Period4', 'Period5'])\ndata_p = pd.DataFrame(np.random.randint(5, 20, size=(10, 5)), columns=['Period1', 'Period2', 'Period3', 'Period4', 'Period5'])\n\n# 使用两种不同的方法计算平均值\n# 第一种方法：使用内置的.mean()函数计算data_n除第一列外每列的平均值\nmean_n_c = data_n.iloc[:, 1:].mean(axis=1)\n\n# 第二种方法：使用.agg()函数和np.mean计算data_p除第一列外每列的平均值\nmean_p_c = data_p.iloc[:, 1:].agg(np.mean, axis=1)\n\n# 绘制平均贡献的直线图\nfig, ax = plt.subplots()\nmean_n_c.plot(ax=ax, label=\"Without punishment\", marker='o')\nmean_p_c.plot(ax=ax, label=\"With punishment\", marker='x')\nax.set_title(\"Average Contributions to the Public Goods Game\")\nax.set_ylabel(\"Average Contribution\")\nax.set_xlabel(\"Periods (excluding the first)\")\nax.legend()\nplt.grid(True)\nplt.show()\n\n# 绘制第一和最后阶段平均贡献的列图\nfirst_last_mean_n = mean_n_c.iloc[[0, -1]]\nfirst_last_mean_p = mean_p_c.iloc[[0, -1]]\n\nfig, ax = plt.subplots()\nfirst_last_mean_n.plot(kind='bar', ax=ax, label=\"Without punishment\", color='blue', alpha=0.7, width=0.4, position=0)\nfirst_last_mean_p.plot(kind='bar', ax=ax, label=\"With punishment\", color='orange', alpha=0.7, width=0.4, position=1)\nax.set_title(\"Average Contributions at the First and Last Periods\")\nax.set_ylabel(\"Average Contribution\")\nax.set_xticklabels(['First Period', 'Last Period'])\nax.legend()\nplt.grid(True, axis='y')\nplt.show()\n\nC:\\Users\\LMX\\AppData\\Local\\Temp\\ipykernel_23780\\135272392.py:15: FutureWarning: The provided callable &lt;function mean at 0x000001FD0A0167A0&gt; is currently using DataFrame.mean. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"mean\" instead.\n  mean_p_c = data_p.iloc[:, 1:].agg(np.mean, axis=1)"
  },
  {
    "objectID": "Practice1-2.html#practice-2.3---2.6",
    "href": "Practice1-2.html#practice-2.3---2.6",
    "title": "Practice1-2",
    "section": "Practice 2.3 - 2.6",
    "text": "Practice 2.3 - 2.6\nThe following Python code demonstrates various visualizations, including a bar chart, line chart, pie chart, scatter plot, and heatmap, all combined in one block.\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\n# Practice 2.3: Bar Chart\ndata_bar = {\n    'Category': ['A', 'B', 'C', 'D'],\n    'Values': [23, 45, 56, 78]\n}\ndf_bar = pd.DataFrame(data_bar)\n\n# Plot bar chart\nplt.figure(figsize=(10, 6))\nplt.bar(df_bar['Category'], df_bar['Values'], color='skyblue')\nplt.title('Category vs. Values')\nplt.xlabel('Category')\nplt.ylabel('Values')\nplt.show()\n\n# Practice 2.4: Line Chart\ndata_line = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Sales': [100, 150, 200, 250, 300]\n}\ndf_line = pd.DataFrame(data_line)\n\n# Plot line chart\nplt.figure(figsize=(10, 6))\nplt.plot(df_line['Month'], df_line['Sales'], marker='o', linestyle='-', color='b')\nplt.title('Monthly Sales')\nplt.xlabel('Month')\nplt.ylabel('Sales')\nplt.grid(True)\nplt.show()\n\n# Practice 2.5: Pie Chart\nsizes = [15, 30, 45, 10]\nlabels = ['A', 'B', 'C', 'D']\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\nexplode = (0.1, 0, 0, 0)  # Highlight the first slice\n\n# Plot pie chart\nplt.figure(figsize=(8, 8))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)\nplt.title('Pie Chart Example')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()\n\n# Practice 2.6: Scatter Plot\ndata_scatter = {\n    'X': [1, 2, 3, 4, 5],\n    'Y': [2, 3, 5, 7, 11]\n}\ndf_scatter = pd.DataFrame(data_scatter)\n\n# Plot scatter plot\nplt.figure(figsize=(10, 6))\nplt.scatter(df_scatter['X'], df_scatter['Y'], color='red', marker='x')\nplt.title('Scatter Plot of X vs. Y')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.grid(True)\nplt.show()\n\n# Practice 2.6: Heatmap\nnp.random.seed(0)\ndata_heatmap = np.random.rand(10, 12)\ndf_heatmap = pd.DataFrame(data_heatmap, columns=[f'Feature {i}' for i in range(1, 13)])\n\n# Plot heatmap\nplt.figure(figsize=(12, 8))\nsns.heatmap(df_heatmap, annot=True, cmap='coolwarm')\nplt.title('Heatmap Example')\nplt.show()"
  }
]